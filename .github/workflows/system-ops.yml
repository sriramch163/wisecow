name: System Operations

on:
  workflow_call:
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours
  workflow_dispatch:

jobs:
  health-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: pip install -r cicd/requirements-ci.txt
      
      - name: Run system health check
        env:
          CPU_THRESHOLD: 80
          MEMORY_THRESHOLD: 80
          DISK_THRESHOLD: 80
        run: python cicd/system_monitor_ci.py
      
      - name: Upload health logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: health-logs
          path: system_health.log
          overwrite: true

  backup:
    runs-on: ubuntu-latest
    needs: health-check
    if: success()
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: pip install -r cicd/requirements-ci.txt
      
      - name: Run backup
        env:
          SOURCE_DIR: ./k8s
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
        run: python cicd/backup_ci.py
      
      - name: Upload backup logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backup-logs
          path: backup.log
          overwrite: true
      
      - name: Upload backup files
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backup-files
          path: /tmp/backups/
          overwrite: true

  notify:
    runs-on: ubuntu-latest
    needs: [health-check, backup]
    if: always()
    steps:
      - name: Notify results
        run: |
          echo "Health Check: ${{ needs.health-check.result }}"
          echo "Backup: ${{ needs.backup.result }}"
          if [[ "${{ needs.health-check.result }}" == "failure" ]]; then
            echo "::error::System health check failed"
          fi
          if [[ "${{ needs.backup.result }}" == "failure" ]]; then
            echo "::error::Backup process failed"
          fi