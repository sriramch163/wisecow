name: System Operations

on:
  workflow_call:
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours
  workflow_dispatch:

jobs:
  health-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: pip install -r cicd/requirements-ci.txt
      
      - name: Run system health check
        run: python cicd/health_monitor.py
      
      - name: Upload health logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: health-logs
          path: health-logs/
          overwrite: true

  backup:
    runs-on: ubuntu-latest
    needs: health-check
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Create backup directory
        run: |
          mkdir -p backup-artifacts
          cp -r k8s/ backup-artifacts/
          cp -r tls/ backup-artifacts/
          cp -r cicd/ backup-artifacts/
          cp -r local/ backup-artifacts/
          cp *.md backup-artifacts/ 2>/dev/null || true
          cp *.sh backup-artifacts/ 2>/dev/null || true
          cp Dockerfile backup-artifacts/ 2>/dev/null || true
          cp ~/.kube/config backup-artifacts/kubeconfig 2>/dev/null || true
      
      - name: Automated Backup to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BACKUP_S3_BUCKET: ${{ secrets.BACKUP_S3_BUCKET || 'wisecow-backups' }}
        run: |
          pip install boto3
          python -c "
          import os, tarfile, boto3, json
          from datetime import datetime
          
          # Create archive
          timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
          archive_name = f'backup_{timestamp}.tar.gz'
          
          with tarfile.open(archive_name, 'w:gz') as tar:
              tar.add('backup-artifacts', arcname='backup')
          
          # Upload to S3 if credentials available
          report = {'timestamp': datetime.now().isoformat(), 'status': 'success'}
          
          try:
              if os.getenv('AWS_ACCESS_KEY_ID') and os.getenv('BACKUP_S3_BUCKET'):
                  s3 = boto3.client('s3')
                  bucket = os.getenv('BACKUP_S3_BUCKET')
                  s3.upload_file(archive_name, bucket, f'backups/{archive_name}')
                  report['location'] = f's3://{bucket}/backups/{archive_name}'
                  print(f'Backup uploaded to S3: {report[\"location\"]}')
              else:
                  report['location'] = 'GitHub Artifacts only'
                  print('S3 credentials not found, using GitHub artifacts')
          except Exception as e:
              report['status'] = 'partial'
              report['error'] = str(e)
              report['location'] = 'GitHub Artifacts only'
              print(f'S3 upload failed: {e}')
          
          with open('backup_report.json', 'w') as f:
              json.dump(report, f, indent=2)
          
          print(f'Backup Status: {report[\"status\"].upper()}')
          "
      
      - name: Upload backup artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wisecow-backup
          path: backup-artifacts/
      
      - name: Upload backup report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backup-report
          path: backup_report.json

  notify:
    runs-on: ubuntu-latest
    needs: [health-check, backup]
    if: always()
    steps:
      - name: Notify results
        run: |
          echo "Health Check: ${{ needs.health-check.result }}"
          echo "Backup: ${{ needs.backup.result }}"
          if [[ "${{ needs.health-check.result }}" == "failure" ]]; then
            echo "::error::System health check failed"
          fi
          if [[ "${{ needs.backup.result }}" == "failure" ]]; then
            echo "::error::Backup process failed"
          fi